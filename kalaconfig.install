<?php

/**
 * @file
 * Un/Installation and update hooks for the kalaconfig project.
 */

use Drupal\Core\Config\FileStorageFactory;
use Drupal\config_filter\Config\FilteredStorage;
use Drupal\config_split\Config\GhostStorage;

/**
 * Installation tasks for the Kalaconfig module.
 */
function kalaconfig_install() {

  // Delete the "article" node type so the Comment module can be uninstalled.
  if ($type = \Drupal::entityManager()->getStorage('node_type')->load('article')) {
    $type->delete();
    // Run cron to purge field tables from the database.
    \Drupal::service('cron')->run();
  }

  // Delete all shortcut entities to allow uninstalling the Shortcut module.
  if (\Drupal::entityTypeManager()->hasHandler('shortcut', 'storage')) {
    $storage = \Drupal::entityTypeManager()->getStorage('shortcut');
    if ($ids = $storage->getQuery()->execute()) {
      $entities = $storage->loadMultiple($ids);
      $storage->delete($entities);
    }
  }

  // Uninstall undesirable modules enabled by default with the standard profile.
  \Drupal::service('module_installer')->uninstall([
    'color',
    'comment',
    'contact',
    'history',
    'shortcut',
    'tour',
  ]);

  // Config change: Enable the HarvestHQ "Chosen" UI module on admin pages only.
  \Drupal::configFactory()->getEditable('chosen.settings')->merge([
    'minimum_single'        => 10,
    'minimum_multiple'      => 0,
    'search_contains'       => TRUE,
    'allow_single_deselect' => TRUE,
    'chosen_include'        => 0,
  ])->save();

  // Config change: Configure devel to improve debug output.
  \Drupal::configFactory()->getEditable('devel.settings')->merge([
    'raw_names'      => TRUE,
    'error_handlers' => [1 => 1, 2 => 2],
    'devel_dumper'   => 'kint',
  ])->save();

  // Config change: Add some useful items to the devel toolbar.
  \Drupal::configFactory()
    ->getEditable('devel.toolbar.settings')
    ->set('toolbar_items', [
      'devel.configs_list',
      'devel.container_info.service',
      'devel.route_info.item',
    ])->save();

  // Config change: Set the folder to store configuration changes made in prod.
  // @see https://www.drupal.org/project/config_tools
  \Drupal::configFactory()
    ->getEditable('config_files.config')
    ->set('directory', '../config/autocommit')
    ->save();

  // Set the default theme.
  \Drupal::service('theme_handler')->setDefault('material_admin');

  // Once this install hook completes, the module's work is done, so turn it
  // off. Register the uninstallation as a shutdown function rather than
  // invoking it immediately to allow the module installation to wrapup cleanly.
  drupal_register_shutdown_function(function () {

    // Get access to the configuration override array.
    global $config;

    // n.b. Reusing the same instance of the module_installer service from
    // earlier causes problems here, so don't use a variable and just load the
    // service from the container again.
    \Drupal::service('module_installer')->uninstall([
      'kalaconfig',
    ]);

    // Turn on all the splits temporarily to capture an initial set of configs.
    // Note that for the export to correctly remove a split's "complete split /
    // blacklist" modules from core.extension.yml, the split must be enabled.
    foreach (['local', 'dev', 'test', 'live'] as $split) {
      $key = "config_split.config_split.$split";
      $split_status[$split] = $config[$key]['status'];
      $config[$key]['status'] = TRUE;
    }

    // Export the initial set of this site's configuration files. Note that this
    // function does not export the configs for all active splits as expected.
    // Therefore, we must also manually export the configs for each split.
    // n.b. Reusing the same instance of the config.storage.sync service causes
    // the configs to not export as expected, so don't assign it to a variable
    // and just load the service from the container every time it's needed.
    $config_split = \Drupal::service('config_split.cli');
    $config_split->export(\Drupal::service('config.storage.sync'));

    // Individually export each config split.
    // Code adapted from \Drupal\config_split\ConfigSplitCliService::ioExport().
    $config_filter = \Drupal::service('plugin.manager.config_filter');
    $storage_factory = \Drupal::service('config_filter.storage_factory');
    $sync = FileStorageFactory::getSync();
    foreach (['local', 'dev', 'test', 'live'] as $split) {
      $plugin_id = "config_split:$split";
      $filter = $config_filter->getFilterInstance($plugin_id);
      $storage = $storage_factory->getFilteredStorage($sync, ['config.storage.sync'], [$plugin_id]);
      $split = new FilteredStorage(new GhostStorage($storage), [$filter]);
      $config_split->export($split);
    }

    // Restore the config splits to their original values.
    foreach (['local', 'dev', 'test', 'live'] as $split) {
      $config["config_split.config_split.$split"]['status']
        = $split_status[$split];
    }

    // Rebuild caches to make the config split settings take effect.
    drupal_flush_all_caches();

    // Execute a config import to trigger the Config Split module to tune this
    // environment according to its active split(s). E.g., turn off
    // production-only modules in the dev environment.
    $config_split->import(\Drupal::service('config.storage.sync'));
  });
}
