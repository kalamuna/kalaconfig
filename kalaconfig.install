<?php

/**
 * @file
 * Un/Installation and update hooks for the kalaconfig project.
 */

use Drupal\Core\Config\FileStorageFactory;
use Drupal\config_filter\Config\FilteredStorage;
use Drupal\config_split\Config\GhostStorage;

/**
 * Installation tasks for the Kalaconfig module.
 */
function kalaconfig_install() {

  // Delete the "article" node type so the Comment module can be uninstalled.
  if ($type = \Drupal::entityManager()->getStorage('node_type')->load($name)) {
    $type->delete();
    // Run cron to purge field tables from the database.
    \Drupal::service('cron')->run();
  }

  // Delete all shortcut entities to allow uninstalling the Shortcut module.
  if (\Drupal::entityTypeManager()->hasHandler('shortcut', 'storage')) {
    $storage = \Drupal::entityTypeManager()->getStorage('shortcut');
    if ($ids = $storage->getQuery()->execute()) {
      $entities = $storage->loadMultiple($ids);
      $storage->delete($entities);
    }
  }

  // Uninstall core modules that are undesirable or managed by Config Split.
  \Drupal::service('module_installer')->uninstall([
    'color',
    'comment',
    'contact',
    'dblog',
    'dynamic_page_cache',
    'history',
    'page_cache',
    'shortcut',
    'tour',
    'views_ui',
  ]);

  // Config change: Enable the HarvestHQ "Chosen" UI module on admin pages only.
  \Drupal::configFactory()->getEditable('chosen.settings')->merge([
    'minimum_single'        => 10,
    'minimum_multiple'      => 0,
    'search_contains'       => TRUE,
    'allow_single_deselect' => TRUE,
    'chosen_include'        => 0,
  ])->save();

  // Export the initial set of this site's configuration files.
  // n.b. Reusing the same instance of the config.storage.sync service causes
  // the configs to not export as expected, so don't assign it to a variable and
  // just load the service from the container every time it's needed.
  $config_split = \Drupal::service('config_split.cli');
  $config_split->export(\Drupal::service('config.storage.sync'));

  // Execute a config import to trigger Config Split to turn on the modules and
  // configuration for this environment (devel for the dev environment, etc.).
  $config_split->import(\Drupal::service('config.storage.sync'));

  // Make some environment-specific config changes for subsequent export.
  // Config change: Configure devel to improve debug output.
  \Drupal::configFactory()->getEditable('devel.settings')->merge([
    'raw_names'      => TRUE,
    'error_handlers' => [1 => 1, 2 => 2],
    'devel_dumper'   => 'kint',
  ])->save();

  // Config change: Add some useful items to the devel toolbar.
  \Drupal::configFactory()
    ->getEditable('devel.toolbar.settings')
    ->set('toolbar_items', [
      'devel.container_info.service',
      'devel.route_info.item',
    ])->save();

  // Config change: Set the folder to store configuration changes made in prod.
  // @see https://www.drupal.org/project/config_tools
  \Drupal::configFactory()
    ->getEditable('config_files.config')
    ->set('directory', '../config/autocommit')
    ->save();

  // Individually export each config split now to capture the settings just
  // changed. Regular exports only capture split configs that apply in the
  // current environment (dev, in this case).
  // Code adapted from \Drupal\config_split\ConfigSplitCliService::ioExport().
  $config_filter = \Drupal::service('plugin.manager.config_filter');
  $storage_factory = \Drupal::service('config_filter.storage_factory');
  $sync = FileStorageFactory::getSync();
  foreach (['local', 'dev', 'test', 'live'] as $split) {
    $plugin_id = "config_split:$split";
    $filter = $config_filter->getFilterInstance($plugin_id);
    $storage = $storage_factory->getFilteredStorage($sync, ['config.storage.sync'], [$plugin_id]);
    $split = new FilteredStorage(new GhostStorage($storage), [$filter]);
    $config_split->export($split);
  }

  // This module's work is done, so turn it off. Register the uninstallation as
  // a shutdown function rather than invoking it immediately to allow this
  // module installation to wrap up cleanly.
  drupal_register_shutdown_function(function () use ($config_split) {

    // Import configs again to remove settings that don't belong in this
    // environment (e.g., no "config_tools" in the dev environment).
    // n.b. For some reason, this import must happen here in the shutdown
    // function for it to work correctly and remove the unwanted configs.
    $config_split->import(\Drupal::service('config.storage.sync'));

    // Uninstall the kalaconfig module as it is no longer needed.
    // n.b. Reusing the same instance of the module_installer service from
    // earlier causes problems here, so don't use a variable and just load the
    // service from the container again.
    \Drupal::service('module_installer')->uninstall(['kalaconfig']);

    // Export config again to capture the uninstallation of kalaconfig.
    $config_split->export(\Drupal::service('config.storage.sync'));
  });
}
