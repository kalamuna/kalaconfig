<?php

/**
 * @file
 * Un/Installation and update hooks for the kalaconfig project.
 */

use Drupal\kalaconfig\KalaUtil;

/**
 * Uninstalls core modules that are undersirable or that will be managed per-environment via Config Split.
 */
function kalaconfig_install() {

  // Delete the "article" node type so the Comment module can be uninstalled.
  KalaUtil::deleteContentType('article');

  // Delete all shortcut entities to allow uninstalling the Shortcut module.
  KalaUtil::deleteAllEntitiesOfType('shortcut');

  // Uninstall core modules that are undesirable or managed by Config Split.
  \Drupal::service('module_installer')->uninstall([
    'block_content',
    'color',
    'comment',
    'contact',
    'dblog',
    'dynamic_page_cache',
    'history',
    'page_cache',
    'shortcut',
    'tour',
    'views_ui',
  ]);

  // Config change: Enable Chosen on admin pages.
  $config_factory = \Drupal::configFactory();
  $chosen = $config_factory->getEditable('chosen.settings');
  $chosen->set('minimum_single', 10);
  $chosen->set('minimum_multiple', 0);
  $chosen->set('search_contains', TRUE);
  $chosen->set('allow_single_deselect', TRUE);
  $chosen->set('chosen_include', 0);
  $chosen->save();

  // Ensure the current configs are exported into code so we can run an import.
  $config_split = \Drupal::service('config_split.cli');
  // n.b. Setting the config.storage.sync service to a variable doesn't work for
  // some reason; it causes the configs to not export as expected, so just load
  // the service from the container every time it's needed.
  $config_split->export(\Drupal::service('config.storage.sync'));
  // Execute a config import to trigger Config Split to turn on the modules for
  // this environment (devel, etc.).
  $config_split->import(\Drupal::service('config.storage.sync'));

  // Make some desired config changes for later export.
  // Config change: Configure devel to improve debug output.
  $devel = $config_factory->getEditable('devel.settings');
  $devel->set('raw_names', TRUE);
  $devel->set('error_handlers', [1 => 1, 2 => 2]);
  $devel->set('devel_dumper', 'kint');
  $devel->save();

  // Config change: Set the folder to store configuration changes made in prod.
  // @see https://www.drupal.org/project/config_tools
  $config_tools = $config_factory->getEditable('config_files.config');
  $config_tools->set('directory', '../config/autocommit');
  $config_tools->save();

  // Export the split configs now to capture the settings just changed.
  KalaUtil::exportConfigSplits(['dev', 'test', 'live']);

  // This module's work is done, so turn it off. Register the uninstallation as
  // a shutdown function rather than invoking it immediately to allow this
  // module installation to wrap up cleanly.
  drupal_register_shutdown_function(function () use ($config_split) {

    // Import configs again to remove settings that don't belong in this
    // environment (e.g., config_tools).
    // n.b. For some reason, this import must happen here in the shutdown
    // function for it to work correctly and remove the unwanted configs.
    $config_split->import(\Drupal::service('config.storage.sync'));

    // n.b. Reusing the same instance of the module_installer service from
    // earlier causes problems here, so don't use a variable and just load the
    // service from the container again.
    \Drupal::service('module_installer')->uninstall(['kalaconfig']);

    // Export config again to capture the uninstallation of kalaconfig.
    $config_split->export(\Drupal::service('config.storage.sync'));
  });
}
